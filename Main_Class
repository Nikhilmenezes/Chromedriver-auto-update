package com.example.chromeversion;

import org.openqa.selenium.By;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class Main_Class {

	
    public static void main(String[] args) throws IOException {
        
        System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir") + "//chromedriver_win32//chromedriver.exe");
        String downloadFilepath = System.getProperty("user.dir");
        HashMap<String, Object> chromePrefs = new HashMap<String, Object>();
        chromePrefs.put("profile.default_content_settings.popups", 0);
        chromePrefs.put("download.default_directory", downloadFilepath);
        ChromeOptions options = new ChromeOptions();
        options.setExperimentalOption("prefs", chromePrefs);
        WebDriver driver = new ChromeDriver(options);
        //DesiredCapabilities capabilities = DesiredCapabilities.chrome();
        Capabilities cap = ((RemoteWebDriver) driver).getCapabilities();
//      String browserName = cap.getBrowserName().toLowerCase();
//      System.out.println(browserName);
//      String os = cap.getPlatform().toString();
//      System.out.println(os);
//      String CDversion = cap.getVersion().toString();
//      System.out.println(CDversion);
//      String majorCDVersion = CDversion.substring(0, CDversion.indexOf("."));
        
        //Getting ChromeDriver Version
        Map<String, String> mp = (Map<String, String>) cap.getCapability("chrome");
        String vs= mp.get("chromedriverVersion");
        System.out.println(String.format("Driver Version: %s", mp.get("chromedriverVersion")));
        String majorCDVersion = vs.substring(0, vs.lastIndexOf("."));

        //Getting ChromeBrowser Version
        driver.get("chrome://version/");
        WebElement chromeBrowserVersion = driver.findElement(By.id("version"));
        String CBversion = chromeBrowserVersion.getText();
        System.out.println("Chrome Browser version: "+CBversion);
        int sepPos = CBversion.lastIndexOf('.');
        String majorVersion=CBversion.substring(0,sepPos);
        driver.get("https://chromedriver.storage.googleapis.com/LATEST_RELEASE_"+majorVersion);
        WebElement downloadchromeDriverVersion =driver.findElement(By.tagName("body"));
        System.out.println("Downloadable Chrome Driver version: "+downloadchromeDriverVersion.getText());
        String majorCBVersion = CBversion.substring(0, CBversion.lastIndexOf("."));
       
          
        if(!majorCBVersion.equals(majorCDVersion)) {
        	System.out.println("Version mismatch present : " +"Browser : "+ majorCBVersion + " Driver :"+ majorCDVersion);
        	driver.get("https://chromedriver.storage.googleapis.com/index.html?path="+downloadchromeDriverVersion.getText()+"/");
        	try {

        	
				Thread.sleep(2000);
				WebElement chromeDriverWin = driver.findElement(By.xpath(".//a[text()='chromedriver_win32.zip']"));
	        	chromeDriverWin.click();
	        	Thread.sleep(40000);
	        	unzip();
	        	driver.close();
	        	driver.quit();
        
        
	        	Random rand = new Random();
	        	//Generate random integers in range 0 to 999
	        	int rand_int1 = rand.nextInt(1000);
        
        
	        	File from = new File(System.getProperty("user.dir") + "\\chromedriver.exe");
	        	File to = new File(System.getProperty("user.dir") + "\\chromedriver_win32\\chromedriver.exe");
	        	File dest = new File(System.getProperty("user.dir") + "\\chromedriver_win32\\chromedriverbkp"+rand_int1+".exe");

	        	to.renameTo(dest);
	        	from.renameTo(to);
        	}catch (InterruptedException e) {
        		// TODO Auto-generated catch block
        		e.printStackTrace();
        	}catch(Exception e) {
        		e.printStackTrace();
        	}
        }
        else {
        	driver.close();
        	driver.quit();
        	System.out.println("Version is intact - present : " +"Browser : "+ majorCBVersion + " Driver :"+ majorCDVersion);
        }
}
   



public static void unzip() {
    	try {
			ZipFile zipFile = new ZipFile(System.getProperty("user.dir")+"\\chromedriver_win32.zip");
			Enumeration<?> enu = zipFile.entries();
			while (enu.hasMoreElements()) {
				ZipEntry zipEntry = (ZipEntry) enu.nextElement();

				String name = zipEntry.getName();
				long size = zipEntry.getSize();
				long compressedSize = zipEntry.getCompressedSize();
				System.out.printf("File name: %-20s | File size: %6d | compressed size: %6d\n", 
						name, size, compressedSize);

				File file = new File(name);
				if (name.endsWith("/")) {
					file.mkdirs();
					continue;
				}

				File parent = file.getParentFile();
				if (parent != null) {
					parent.mkdirs();
				}

				InputStream is = zipFile.getInputStream(zipEntry);
				FileOutputStream fos = new FileOutputStream(file);
				byte[] bytes = new byte[1024];
				int length;
				while ((length = is.read(bytes)) >= 0) {
					fos.write(bytes, 0, length);
				}
				is.close();
				fos.close();

			}
			zipFile.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
}
